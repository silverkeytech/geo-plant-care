@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
<!DOCTYPE html>
<html lang="en">
<style>
    .popover {
        max-width: 882px !important;
        width: 882px;
    }
    .popover .popover-body {
        height: 557px;
    }
</style>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'wasm-unsafe-eval' 'inline-speculation-rules' 'unsafe-inline' https://apis.google.com https://maps.googleapis.com;">
    <title> GeoPlantCare</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/GeoPlantCare.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Spicy+Rice&display=swap"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3" data-bs-theme="dark" style="background-color: #b7decd;">
            <div class="container-fluid">
                <span class="navbar-brand mb-0 h1 fs-1" style="color: white; font-family: 'Spicy Rice', cursive;">GeoPlantCare</span>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item d-flex align-items-center">
                            <img src="~/icons/User.png" alt="username" style="height: 35px; width: 35px; margin-right: 10px;"/>
                            <a class="nav-link active fs-4" style="color: white;" aria-current="page">Username</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fs-4" style="color: white;" href="/">Home</a>
                        </li>
                    </ul>
                    <form class="d-flex align-items-center" role="search">
                        <input class="form-control" type="search" placeholder="Search" aria-label="Search" style="height: 40px;">
                        <button type="button" class="btn">
                        <!-- Search icon here -->
                        </button>
                        <span id="locationName" class="fs-6" style="color: white; font-weight: bold; display: inline-flex; align-items: center; white-space: nowrap;  text-overflow: ellipsis;  "></span>                 
                        <button class="btn" data-bs-toggle="popover" data-bs-placement="bottom" title="Select a Location" data-bs-html="true" data-bs-trigger="focus">
                            <img src="~/icons/Location.png" alt="location" style="width: 35px; height: 35px;" />
                        </button>  
                        <span id="temperature" class="fs-6" style="color: white; font-weight: bold; display: inline;"></span> 
                        <button class="btn">
                            <img src="~/icons/SunBehindCloud.png" alt="sunbehindcloud" />
                        </button>
                    </form>
                </div>
            </div>
        </nav>

    </header>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
        <div id="plantContainer"></div>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - GeoPlantCare - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script async src="https://maps.googleapis.com/maps/api/js?key=@Configuration["APIKeys:GoogleMaps"]&callback=initMap"> </script>
    <script>
        let map;
        let marker;
        let lastKnownPosition = null;
        let mapInitialized = false;

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 8
            });

            var marker = new google.maps.Marker({
                position: lastKnownPosition || map.getCenter(),
                map: map,
                title: 'Your Location',
                draggable: true
            });

            var geocoder = new google.maps.Geocoder;

            // Event listener to update marker position and location name when map is clicked
            map.addListener('click', function (event) {
                marker.setPosition(event.latLng);
                geocodeLatLng(geocoder, map, event.latLng);
                lastKnownPosition = event.latLng; // store the last known position

            });

            // Try HTML5 geolocation to set initial marker position and location name
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    marker.setPosition(pos);
                    geocodeLatLng(geocoder, map, pos);
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, map.getCenter());
                }, { enableHighAccuracy: true });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, map.getCenter());
            }
        }

        let lastClickedLatLng;
        async function geocodeLatLng(geocoder, map, latlng) {
            geocoder.geocode({ 'location': latlng }, async function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {
                        let addressComponents = results[0].address_components;
                        let locationName = "";
                        for(let component of addressComponents) {
                            if(component.types.includes('administrative_area_level_1')) {
                                locationName = component.long_name.replace("Governorate", "");
                            }
                            if(component.types.includes('country')) {
                                locationName += ", " + component.long_name;
                            }
                        }
                        selectedLocationName = locationName;
                        selectedLatLng = latlng; // store the latlng to use later in the "Select this location" button click event
                    } else {
                        window.alert('No results found');
                    }
                } else {
                    window.alert('Geocoder failed due to: ' + status);
                }
            });
        }
        
        async function fetchTemperature(lat, lng) {
            try {
                const openWeatherApiKey = '@Configuration["APIKeys:OpenWeather"]';
                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${openWeatherApiKey}&units=metric`);
                const data = await response.json();
                return Math.round(data.main.temp); // Round the temperature value here
            } catch (error) {
                console.error('Error fetching temperature:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            const popoverButton = document.querySelector('.btn[data-bs-toggle="popover"]');
                let selectButton = document.createElement('button');  // Create the button here
                selectButton.textContent = "Select this location";
                selectButton.classList.add('btn', 'btn-primary');
                selectButton.style.margin = "10px";
                selectButton.addEventListener('click', async function () {
                    popover.hide();
                    if (lastClickedLatLng) {
                        const temp = await fetchTemperature(lastClickedLatLng.lat(), lastClickedLatLng.lng());
                        if (temp !== undefined) {
                            document.getElementById('temperature').textContent = Math.round(temp) + '°C';
                        }
                    }
                });
                const popover = new bootstrap.Popover(popoverButton, {
                    trigger: 'manual',
                    html: true,
                    content: "<div id='map' style='height: 400px; width: 100%;'></div>",
                    sanitize: false
                });

            popoverButton.addEventListener('click', function (event) {
                event.preventDefault();
                popover.toggle();
            });

            popoverButton.addEventListener('inserted.bs.popover', function () {
                if (!mapInitialized) {
                    initMap();
                    mapInitialized = true;
                }
                document.querySelector('.popover-body').appendChild(selectButton);  // Append the button here
            });
            
            selectButton.addEventListener('click', async function () {
                popover.hide();
                if (selectedLatLng) {
                    // Set the location name and temperature using the stored values when the "Select this location" button is clicked
                    document.getElementById('locationName').textContent = selectedLocationName;

                    const temp = await fetchTemperature(selectedLatLng.lat(), selectedLatLng.lng());
                    if (temp !== undefined) {
                        document.getElementById('temperature').textContent = Math.round(temp) + '°C';
                    }
                    // Set the data in sessionStorage
                    sessionStorage.setItem('locationName', selectedLocationName);
                    sessionStorage.setItem('temperature', Math.round(temp) + '°C');
                    
                }
            });

                // Read the data from sessionStorage
            const storedLocationName = sessionStorage.getItem('locationName');
            const storedTemperature = sessionStorage.getItem('temperature');

            // Check if data exists and set the text content accordingly
            if (storedLocationName) {
                document.getElementById('locationName').textContent = storedLocationName;
            }
            if (storedTemperature) {
                document.getElementById('temperature').textContent = storedTemperature;
            }
                // Call fetchPlantsBasedOnTemperature if there's stored temperature and location
            if (sessionStorage.getItem('temperature') && sessionStorage.getItem('locationName')) {
                fetchPlantsBasedOnTemperature();
            }
            // Prevent closing the popover when clicking inside it
            document.addEventListener('click', function (e) {
                if (popover._popper && popover._popper.contains(e.target)) {
                    e.stopPropagation();
                }
            }, true);

            document.querySelector('.popover-body').appendChild(selectButton);
            selectButton.addEventListener('click', async function () {
                popover.hide();
                if (lastClickedLatLng) {
                    const temp = await fetchTemperature(lastClickedLatLng.lat(), lastClickedLatLng.lng());
                    if (temp !== undefined) {
                        document.getElementById('temperature').textContent = temp + '°C';
                    }
                }
            });
        });
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>